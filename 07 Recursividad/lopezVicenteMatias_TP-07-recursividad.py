""" 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla
el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario """
def factorial(num):
    return 1 if (num == 0 or num == 1) else num * factorial(num - 1)

#Programa principal
num = int(input("Ingrese un n√∫mero: "))

for i in range(1, num + 1):
    fact = factorial(i)
    print(f"El factorial de {i} es: {fact}")

""" 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie
completa hasta la posici√≥n que el usuario especifique. """
def finobacci(pos):
    return pos if pos <= 1 else finobacci(pos - 1) + finobacci(pos - 2)

#Programa principal
pos = int(input("Ingrese un n√∫mero: "))
for i in range(1, pos + 1):
    print(finobacci(i))

""" 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). 
Prueba esta funci√≥n en un algoritmo general. """

def potencia(base, exp):
    return 1 if exp == 0 else base *potencia(base, exp -1)

#Programa Principal
base = int(input("Ingrese el n√∫mero base: "))
exp = int(input("Ingrese el n√∫mero exponente: "))
print(potencia(base, exp))

""" 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como
una cadena de texto. 
Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. Para convertir un n√∫mero decimal a 
binario, se puede seguir este procedimiento:
1. Dividir el n√∫mero por 2.
2. Guardar el resto (0 o 1).
3. Repetir el proceso con el cociente hasta que llegue a 0.
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario."""

def aBinario(num):
    return str(num) if num <= 1 else aBinario(num // 2) + str(num % 2)

#Programa principal
num = int(input("Ingrese un numero: "))
print(aBinario(num))

""" 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True
si es un pal√≠ndromo o False si no lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed(). """

def esPalindromo(palabra):
    largo = len(palabra)
    if largo <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    else:
        return esPalindromo(palabra[1 : -1])
    
#Programa Principal
palabra = input("Ingrese una palabra: ")
print(esPalindromo(palabra))

""" 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus
d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5) """

def sumadigitos(num):
    if num == 0:
        return 0
    else:
        return num % 10 + sumadigitos(num // 10)

#Programa principal
num = int(input("Ingrese un n√∫mero: "))
print(sumadigitos(num))
""" 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y 
as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita
para construir toda la pir√°mide.
Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1) """

def contarBloques(num):
    return 1 if num == 1 else num + contarBloques(num -1) 

#Programa Principal
num = int(input("Ingrese la cantidas de bloques de la base: "))
print(contarBloques(num))

""" 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito 
(entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
Ejemplos:
contar_digito(12233421, 2) ‚Üí 3 
contar_digito(5555, 5) ‚Üí 4
contar_digito(123456, 7) ‚Üí 0"""

def contarDigito(num, dig):
    if num == 0:
        return 0
    elif num % 10 == dig:
        return 1 + contarDigito(num // 10, dig)
    else:
        return contarDigito(num // 10, dig)

#Programa Principal
num = int(input("Ingrese un n√∫mero entero positivo: "))
dig = int(input("Ingrese el d√≠gito a buscar: "))
print(contarDigito(num, dig))